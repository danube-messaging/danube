syntax = "proto3";

package danube_admin;

// Keep enums/messages consistent with danube/DanubeApi.proto
enum DispatchStrategy {
  NonReliable = 0;
  Reliable = 1;
}

enum RetentionPolicy {
  RetainUntilAck = 0;
  RetainUntilExpire = 1;
}

message ReliableOptions {
  uint64 segment_size = 1; // in MB
  RetentionPolicy retention_policy = 4; // RetainUntilAck or RetainUntilExpire
  uint64 retention_period = 5; // in seconds
}

// Message representing topic retention/dispatch strategy
message TopicDispatchStrategy {
  DispatchStrategy strategy = 1; // NonReliable or Reliable
  ReliableOptions reliable_options = 2; // options for Reliable dispatch strategy
}

service BrokerAdmin {
  // Broker related RPCs
  rpc ListBrokers(Empty) returns (BrokerListResponse);
  rpc GetLeaderBroker(Empty) returns (BrokerResponse);
  rpc ListNamespaces(Empty) returns (NamespaceListResponse);
  
}

service NamespaceAdmin {
  // Namespace related RPCs
  rpc GetNamespaceTopics(NamespaceRequest) returns (TopicListResponse);
  rpc GetNamespacePolicies(NamespaceRequest) returns (PolicyResponse);
  rpc CreateNamespace(NamespaceRequest) returns (NamespaceResponse);
  rpc DeleteNamespace(NamespaceRequest) returns (NamespaceResponse);
}

service TopicAdmin {
  // Topic related RPCs
  rpc ListTopics(NamespaceRequest) returns (TopicListResponse);
  rpc CreateTopic(NewTopicRequest) returns (TopicResponse);
  rpc CreatePartitionedTopic(PartitionedTopicRequest) returns (TopicResponse);
  rpc DeleteTopic(TopicRequest) returns (TopicResponse);
  rpc ListSubscriptions(TopicRequest) returns (SubscriptionListResponse);
  rpc Unsubscribe(SubscriptionRequest) returns (SubscriptionResponse);
  rpc DescribeTopic(DescribeTopicRequest) returns (DescribeTopicResponse);
}

// Common Messages
message Empty {}

message NamespaceRequest {
  string name = 1;
}

message NamespaceResponse {
  bool success = 1;
}

message NewTopicRequest {
  string name = 1;
  string schema_type = 2;
  string schema_data = 3;
  TopicDispatchStrategy dispatch_strategy = 4;
}

message TopicRequest {
  string name = 1;
}

message TopicResponse {
  bool success = 1;
}

message PartitionedTopicRequest {
  string base_name = 1;          // /namespace/topic
  uint32 partitions = 2;         // number of partitions
  string schema_type = 3;
  string schema_data = 4;
  TopicDispatchStrategy dispatch_strategy = 5;
}

message SubscriptionRequest {
  string topic = 1;
  string subscription = 2;
}

message SubscriptionResponse {
  bool success = 1;
}

// Response Messages
message BrokerListResponse {
  repeated BrokerInfo brokers = 1;
}

message BrokerInfo {
  string broker_id = 1;
  string broker_addr = 2;
  string broker_role = 3;
}

message BrokerResponse {
  string leader = 1;
}

message NamespaceListResponse {
  repeated string namespaces = 1;
}

message TopicListResponse {
  repeated string topics = 1;
}

message PolicyResponse {
  string policies = 1;
}

message SubscriptionListResponse {
  repeated string subscriptions = 1;
}

// Describe Topic (schema + subscriptions)
message DescribeTopicRequest {
  string name = 1; // /namespace/topic
}

message DescribeTopicResponse {
  string name = 1;
  int32 type_schema = 2;
  bytes schema_data = 3;
  repeated string subscriptions = 4;
}